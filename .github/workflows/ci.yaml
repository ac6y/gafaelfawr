name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python:
          - 3.8
          - 3.9
        database:
          - SQLite
          - PostgreSQL

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      # First try to restore the fully-installed node modules.  If that
      # works (no changes to the JavaScript layer), skip npm i and
      # restoring the cache of downloaded modules.  If that fails, restore
      # the cache of the downloaded modules and then run npm
      # clean-install.
      - name: Cache installed Node modules
        uses: actions/cache@v2
        id: node-cache
        with:
          path: ./ui/node_modules
          key: node-${{ steps.node_version.outputs.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Cache downloaded Node.js modules
        uses: actions/cache@v2
        if: steps.node-cache.outputs.cache-hit != 'true'
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install Node dependencies
        run: npm ci
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: ./ui

      # This has to happen after installing Node modules because we run
      # eslint and it wants react to be already installed.
      - name: Run pre-commit
        uses: pre-commit/action@v2.0.0
        if: matrix.database == 'SQLite'

      - name: Build the UI
        run: npm run build
        working-directory: ./ui

      - name: Install tox
        run: pip install tox

      - name: Cache tox environments
        id: cache-tox
        uses: actions/cache@v2
        with:
          path: .tox
          # requirements/*.txt and tox.ini have versioning or dependency
          # information that would impact the tox environment.
          key: tox-${{ matrix.python }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('tox.ini') }}
          restore-keys: |
            tox-${{ matrix.python }}-${{ hashFiles('requirements/*.txt') }}-

      - name: Run tox (SQLite)
        run: tox -e py,coverage-report,typing
        if: matrix.database == 'SQLite'

      - name: Run tox (PostgreSQL)
        run: tox -e docker
        if: matrix.database == 'PostgreSQL'

  build:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2

      - name: Define the Docker tag
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF} | sed -E 's,refs/(heads|tags)/,,' | sed -E 's,/,-,g')

      - name: Print the tag
        id: print
        run: echo ${{steps.vars.outputs.tag}}

      - name: Log into Docker Hub
        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull previous images
        run: |
          docker pull lsstsqre/gafaelfawr:deps-${{steps.vars.outputs.tag}} || true
          docker pull lsstsqre/gafaelfawr:${{steps.vars.outputs.tag}} || true

      - name: Build the dependencies Docker image
        run: |
          docker build --target dependencies-image \
            --cache-from=lsstsqre/gafaelfawr:deps-${{steps.vars.outputs.tag}} \
            --tag lsstsqre/gafaelfawr:deps-${{steps.vars.outputs.tag}} .

      - name: Build the runtime Docker image
        run: |
          docker build --target runtime-image \
            --cache-from=lsstsqre/gafaelfawr:${{steps.vars.outputs.tag}} \
            --tag lsstsqre/gafaelfawr:${{steps.vars.outputs.tag}} .

      - name: Push Docker images
        run: |
          docker push lsstsqre/gafaelfawr:deps-${{steps.vars.outputs.tag}}
          docker push lsstsqre/gafaelfawr:${{steps.vars.outputs.tag}}

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install tox and LTD Conveyor
        run: pip install tox ltd-conveyor

      - name: Install graphviz and ImageMagick
        run: sudo apt-get install graphviz imagemagick

      - name: Run tox
        run: tox -e docs

      - name: Upload to LSST the Docs
        env:
          LTD_USERNAME: ${{ secrets.LTD_USERNAME }}
          LTD_PASSWORD: ${{ secrets.LTD_PASSWORD }}
        run: ltd upload --product gafaelfawr --gh --dir docs/_build/html
