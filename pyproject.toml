[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "setuptools_scm[toml]>=3.4"
]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py,coverage-report,typing,lint,docs
isolated_build = True

[testenv]
description = Run pytest against {envname}.
deps =
    -r{toxinidir}/requirements/main.txt
    -r{toxinidir}/requirements/dev.txt
commands =
    coverage run -m pytest {posargs}

[testenv:coverage-report]
description = Compile coverage from each test run.
skip_install = true
deps = coverage[toml]>=5.0.2
depends =
    py
commands =
    coverage combine
    coverage report

[testenv:typing]
description = Run mypy.
commands =
    mypy src/jwt_authorizer tests setup.py

[testenv:lint]
description = Lint codebase by running pre-commit (Black, isort, Flake8).
skip_install = true
deps =
    pre-commit
commands = pre-commit run --all-files

[testenv:docs]
description = Build documentation (HTML) with Sphinx.
commands =
    sphinx-build -n -T -b html -d {envtmpdir}/doctrees docs docs/_build/html

[testenv:run]
description = Run the development server with auto-reload for code changes.
usedevelop = true
whitelist_externals =
    docker-compose
commands_pre =
    docker-compose up -d
    holdup -t 60 -T 5 -i 1 -n tcp://localhost:6379/
commands =
    adev runserver --app-factory create_dev_app src/jwt_authorizer/app.py
commands_post =
    docker-compose down
"""

[tool.coverage.run]
parallel = true
branch = true
source = ["jwt_authorizer"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.black]
line-length = 79
target-version = ["py37"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.isort]
include_trailing_comma = true
multi_line_output = 3
known_first_party = ["jwt_authorizer", "tests"]
known_third_party = ["aiohttp", "aiohttp_csrf", "aiohttp_jinja2", "aiohttp_remotes", "aiohttp_session", "aioredis", "cachetools", "click", "cryptography", "dynaconf", "jinja2", "jwt", "mockaioredis", "pytest", "safir", "setuptools", "structlog", "wtforms"]
skip = ["docs/conf.py"]
