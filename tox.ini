[tox]
envlist = py,typing,lint,docs,docs-linkcheck
isolated_build = True

[docker:postgres]
image = postgres:latest
ports =
    5432:5432/tcp
environment =
    POSTGRES_PASSWORD=INSECURE-PASSWORD
    POSTGRES_USER=gafaelfawr
    POSTGRES_DB=gafaelfawr
    PGPORT=5432
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
    --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
    --host=127.0.0.1 --quiet --no-align --tuples-only \
    -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1
volumes =
    bind:ro:{toxinidir}/tests/support/postgresql.conf:/etc/postgresql/postgresql.conf

[docker:redis]
image = redis:latest
ports =
    6379:6379/tcp
healthcheck_cmd =
    redis-cli ping
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[testenv]
description = Run pytest against {envname}
deps =
    -r{toxinidir}/requirements/main.txt
    -r{toxinidir}/requirements/dev.txt
setenv =
    GAFAELFAWR_UI_PATH = {toxinidir}/ui/public

[testenv:coverage-report]
description = Compile coverage from each test run.
skip_install = true
deps = coverage[toml]>=5.0.2
depends =
    py-coverage
commands = coverage report

[testenv:docs]
description = Build documentation (HTML) with Sphinx
allowlist_externals =
    rm
commands =
    rm -rf docs/dev/internals
    gafaelfawr openapi-schema --add-back-link --output docs/_static/openapi.json
    sphinx-build -W --keep-going -n -T -b html -d {envtmpdir}/doctrees docs docs/_build/html

[testenv:docs-linkcheck]
description = Check links in the documentation
commands =
    gafaelfawr openapi-schema --add-back-link --output docs/_static/openapi.json
    sphinx-build --keep-going -n -W -T -b linkcheck -d {envtmpdir}/doctrees docs docs/_build/linkcheck

[testenv:lint]
description = Lint codebase by running pre-commit (Black, isort, Flake8)
skip_install = true
deps =
    pre-commit
commands = pre-commit run --all-files

[testenv:py]
description = Run pytest with Docker prerequisites
docker =
    postgres
    redis
commands =
    pytest -vv {posargs}

[testenv:py-coverage]
description = Run pytest with Docker prerequisites and coverage analysis
docker =
    postgres
    redis
commands =
    pytest -vv --cov=gafaelfawr --cov-branch --cov-report= {posargs}

[testenv:py-full]
description = Run pytest with coverage and Kubernetes
docker =
    postgres
    redis
commands =
    pytest -vv --cov=gafaelfawr --cov-branch --cov-report= {posargs}
setenv =
    GAFAELFAWR_UI_PATH = {toxinidir}/ui/public
    TEST_KUBERNETES = 1

[testenv:run]
description = Run the development server with auto-reload for code changes
usedevelop = true
allowlist_externals =
    docker-compose
commands_pre =
    docker-compose up -d
    holdup -t 60 -T 5 -i 1 -n tcp://localhost:6379/
    holdup -t 60 -T 5 -i 1 -n tcp://localhost:5432/
commands =
    gafaelfawr init
    gafaelfawr run
commands_post =
    docker-compose down
setenv =
    GAFAELFAWR_CONFIG_PATH = {toxinidir}/examples/gafaelfawr-dev.yaml

[testenv:typing]
description = Run mypy
commands =
    mypy src/gafaelfawr tests
